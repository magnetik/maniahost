<frame>
<script><!--
/**
 * ManiaLib for ManiaScript
 *
 * Minimum Maniaplanet version: 2011-10-19_11_55
 * 
 * This framework was specifically designed for use in Manialinks; it provides
 * classic features as you can find in JavaScript frameworks (manipulation 
 * primitives, utilities, event listening architecture, etc.). 
 
 * It also provides some simple UI primitives (only dialogs and tooltips for 
 * now). It still an early version so it's not documented, not extremely useful, 
 * and quite possibly full of bugs. However it's LGPL so use it at your own 
 * risk :)
 *
 * And don't hesitate to come ask questions in the dedicated forum, we'll be 
 * happy to help:
 * http://forum.maniaplanet.com/viewforum.php?f=40
 * 
 * @see         http://code.google.com/p/manialib/
 * @copyright   Copyright (c) 2009-2011 NADEO (http://www.nadeo.com)
 * @license     http://www.gnu.org/licenses/lgpl.html LGPL License 3
 * @version     $Revision: 523 $:
 * @author      $Author: maximeraoust $:
 * @date        $Date: 2011-10-26 12:41:57 +0200 (mer., 26 oct. 2011) $:
 */
 
#Include "TextLib" as TextLib
#RequireContext CGameManialinkScriptHandler

////////////////////////////////////////////////////////////////////////////////
//
// Internal variables
// These are used by the framework ; you shouldn't interact with them directly
//
////////////////////////////////////////////////////////////////////////////////

declare Boolean[Text] _manialib_visibility;
declare Text[Text] _manialib_values;
declare Text[][Text] _manialib_actions;
declare Text[][][Text][Text] _manialib_event_listeners;

////////////////////////////////////////////////////////////////////////////////
//
// Utils
//
////////////////////////////////////////////////////////////////////////////////

Real manialib_max(Real real1, Real real2)
{
	if(real1 > real2)
	{
		return real1;
	}
	return real2;
}

Real manialib_min(Real real1, Real real2)
{
	if(real1 < real2)
	{
		return real1;
	}
	return real2;
}

Text manialib_event2text(CGameManialinkScriptEvent::Type eventType)
{
	declare _bindings = [
		"mouseclick" => CGameManialinkScriptEvent::Type::MouseClick,
		"mouseover" => CGameManialinkScriptEvent::Type::MouseOver,
		"mouseout" => CGameManialinkScriptEvent::Type::MouseOut,
		"keypress" => CGameManialinkScriptEvent::Type::KeyPress
	];
	if(_bindings.exists(eventType))
	{
		return _bindings.keyof(eventType);
	}
	log("[WARNING] Unkown event type: "^eventType);
	return "";
}

Void manialib_set_value(Text name, Text value)
{
	_manialib_values[name] = value;
}

Text manialib_get_value(Text name)
{
	if(_manialib_values.existskey(name))
	{
		return _manialib_values[name];
	}
	return "";
}

////////////////////////////////////////////////////////////////////////////////
//
// Manipulation
//
////////////////////////////////////////////////////////////////////////////////

Void manialib_hide(Text controlId)
{
	declare CGameManialinkControl control = Page.MainFrame.GetFirstChild(controlId);
	if(control != Null)
	{
		control.Hide();
		_manialib_visibility[controlId] = False;
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Void manialib_show(Text controlId)
{
	declare CGameManialinkControl control = Page.MainFrame.GetFirstChild(controlId);
	if(control != Null)
	{
		control.Show();
		_manialib_visibility[controlId] = True;
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Boolean manialib_visible(Text controlId)
{
	if(_manialib_visibility.existskey(controlId))
	{
		return _manialib_visibility[controlId];
	}
	return True;
}

Void manialib_toggle(Text controlId)
{
	if(manialib_visible(controlId))
	{
		manialib_hide(controlId);
	}
	else
	{
		manialib_show(controlId);
	}
}

Void manialib_posx(Text controlId, Real posx)
{
	declare CGameManialinkControl control = Page.MainFrame.GetFirstChild(controlId);
	if(control != Null)
	{
		control.PosnX = posx;
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Void manialib_posy(Text controlId, Real posy)
{
	declare CGameManialinkControl control = Page.MainFrame.GetFirstChild(controlId);
	if(control != Null)
	{
		control.PosnY = posy;
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Void manialib_posz(Text controlId, Real posz)
{
	declare CGameManialinkControl control = Page.MainFrame.GetFirstChild(controlId);
	if(control != Null)
	{
		control.PosnZ = posz;
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

// Weird function/hack for the tooltip feature
Void manialib_move_to_mouse(Text controlId, Real offsetX, Real offsetY, Real boundingBoxX, Real boundingBoxY)
{
	declare CGameManialinkControl control = Page.MainFrame.GetFirstChild(controlId);
	control.PosnX = manialib_min(MouseX + offsetX, 160.0 - boundingBoxX);
	control.PosnY = manialib_max(MouseY + offsetY, -90.0 + boundingBoxY);
}

Void manialib_set_text(Text controlId, Text newtext)
{
	declare CGameManialinkLabel control <=> (Page.MainFrame.GetFirstChild(controlId) as CGameManialinkLabel);
	if(control != Null)
	{
		control.SetText(newtext);
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Void manialib_set_entry_value(Text controlId, Text value)
{
	declare CGameManialinkEntry control <=> (Page.MainFrame.GetFirstChild(controlId) as CGameManialinkEntry);
	if(control != Null)
	{
		control.Value = value;
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Void manialib_disable_links()
{
	// TODO feature in the next update of Maniaplanet ?
}

Void manialib_enable_links()
{
	// TODO feature in the next update of Maniaplanet ?
}

////////////////////////////////////////////////////////////////////////////////
//
// ManiaScript Framework Actions handling (internal stuff)
//
////////////////////////////////////////////////////////////////////////////////

Void manialib_action_register(Text id, Text[] action)
{
	_manialib_actions[id] = action;
}

Void manialib_action_execute(Text[] action)
{
	if(action.count == 0)
	{
		return;
	}
	switch(action[0])
	{
		case "set_value":
			manialib_set_value(action[1], action[2]);
			
		case "manialink":
			OpenLink(action[1], ::LinkType::ManialinkBrowser);
			
		case "manialinkid":
			OpenLink(action[1], ::LinkType::ManialinkFromId);

		case "external":
			OpenLink(action[1], ::LinkType::ExternalBrowser);
			
		case "externalid":
			OpenLink(action[1], ::LinkType::ExternalFromId);

		case "goto":
			OpenLink(action[1], ::LinkType::Goto);
			
		case "goto":
			OpenLink(action[1], ::LinkType::GotoFromId);

		case "hide":
			manialib_hide(action[1]);
			
		case "show":
			manialib_show(action[1]);
			
		case "toggle":
			manialib_toggle(action[1]);
			
		case "posx":
			// FIXME Because of a bug in TextLib::ToReal() this won't work for now
			manialib_posx(action[1], TextLib::ToReal(action[2]));
			
		case "posy":
			// FIXME Because of a bug in TextLib::ToReal() this won't work for now
			manialib_posy(action[1], TextLib::ToReal(action[2]));
			
		case "posz":
			// FIXME Because of a bug in TextLib::ToReal() this won't work for now
			manialib_posz(action[1], TextLib::ToReal(action[2]));
			
		case "set_text":
			manialib_set_text(action[1], action[2]);
			
		case "set_entry_value":
			manialib_set_entry_value(action[1], action[2]);

		case "move_to_mouse":
			// FIXME Because of a bug in TextLib::ToReal(), we cannot use the params
			manialib_move_to_mouse(action[1], 0.0, -2.0, 75.0, 11.0);
			
		case "disable_links":
			manialib_disable_links();
			
		case "enable_links":
			manialib_enable_links();

		// special case...	
		case "action_execute_id_from_values":
		{
			declare id = manialib_get_value(action[1]);
			if(_manialib_actions.existskey(id))
			{
				manialib_action_execute(_manialib_actions[id]);
			}
		}

		// You can also just pass an empty array
		case "":
			True;
			
		case "none":
			True;
			
		default:
			log("[WARNING] Unkown action name: " ^ action[1]);
	}
}

////////////////////////////////////////////////////////////////////////////////
//
// Event listening
//
////////////////////////////////////////////////////////////////////////////////

Void manialib_event_add_listener(Text controlId, CGameManialinkScriptEvent::Type eventType, Text[] action)
{
	if(!_manialib_event_listeners.existskey(controlId))
	{
		_manialib_event_listeners[controlId] = Text[][][Text];
	}
	if(!_manialib_event_listeners[controlId].existskey(manialib_event2text(eventType)))
	{
		_manialib_event_listeners[controlId][manialib_event2text(eventType)] = Text[][];
	}
	_manialib_event_listeners[controlId][manialib_event2text(eventType)].add(action);
}

Void manialib_event_listener(CGameManialinkScriptEvent event)
{
	if(_manialib_event_listeners.existskey(event.ControlId))
	{
		declare eventTypeName = manialib_event2text(event.Type);
		if(_manialib_event_listeners[event.ControlId].existskey(eventTypeName))
		{
			foreach(action in _manialib_event_listeners[event.ControlId][eventTypeName])
			{
				manialib_action_execute(action);
			}
		}
	}
}

Void manialib_main_loop()
{
	while(True)
	{
		foreach(Event in PendingEvents)
		{
			manialib_event_listener(Event);
		}
		yield;		 
	}
}

////////////////////////////////////////////////////////////////////////////////
//
// UI Primitives
//
////////////////////////////////////////////////////////////////////////////////

Void manialib_ui_dialog(Text controlId, Text message, Text[] action)
{
	manialib_action_register(controlId, action);
	
	manialib_hide("manialib-dialog");
	manialib_posx("manialib-dialog", 0.0);

	manialib_event_add_listener("manialib-dialog-no", CGameManialinkScriptEvent::Type::MouseClick, ["hide", "manialib-dialog"]);
	manialib_event_add_listener("manialib-dialog-no", CGameManialinkScriptEvent::Type::MouseClick, ["enable_links"]);

	manialib_event_add_listener("manialib-dialog-yes", CGameManialinkScriptEvent::Type::MouseClick, ["hide", "manialib-dialog"]);
	manialib_event_add_listener("manialib-dialog-yes", CGameManialinkScriptEvent::Type::MouseClick, ["enable_links"]);
	manialib_event_add_listener("manialib-dialog-yes", CGameManialinkScriptEvent::Type::MouseClick, ["action_execute_id_from_values", "manialib-dialog-yes"]);
	
	manialib_event_add_listener(controlId, CGameManialinkScriptEvent::Type::MouseClick, ["set_text", "manialib-dialog-text", message]);
	manialib_event_add_listener(controlId, CGameManialinkScriptEvent::Type::MouseClick, ["show", "manialib-dialog"]);
	manialib_event_add_listener(controlId, CGameManialinkScriptEvent::Type::MouseClick, ["disable_links"]);
	manialib_event_add_listener(controlId, CGameManialinkScriptEvent::Type::MouseClick, ["set_value", "manialib-dialog-yes", controlId]);
}

Void manialib_ui_tooltip(Text controlId, Text message)
{
	manialib_hide("manialib-dialog");

	manialib_event_add_listener(controlId, CGameManialinkScriptEvent::Type::MouseOver, ["set_text", "manialib-tooltip-text", message]);
	manialib_event_add_listener(controlId, CGameManialinkScriptEvent::Type::MouseOver, ["show", "manialib-tooltip"]);
	manialib_event_add_listener(controlId, CGameManialinkScriptEvent::Type::MouseOver, ["move_to_mouse", "manialib-tooltip", "0.0", "-2.0", "75.0", "11.0"]);
	manialib_event_add_listener(controlId, CGameManialinkScriptEvent::Type::MouseOut, ["hide", "manialib-tooltip"]);
}

-->
</script>
<frame posn="320 0 4" id="manialib-dialog">
	<quad sizen="320 200" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur" scriptevents="1"/>
	<frame posn="-60 35 0.1">
		<quad sizen="123 63" style="Bgs1InRace" substyle="Shadow"/>
		<quad posn="1.5 -1.5 0.1" sizen="120 60" bgcolor="fffe"/>
		<label id="manialib-dialog-text" posn="60 -25 0.8" sizen="110 7" halign="center" valign="center" style="TextTips" text="-" autonewline="1"/>
		<label id="manialib-dialog-yes" posn="55 -47 0.8" sizen="35 7" halign="right" style="CardButtonMedium" scriptevents="1" text="Yes"/>
		<label id="manialib-dialog-no" posn="65 -47 0.8" sizen="35 7" style="CardButtonMedium" scriptevents="1" text="No"/>
	</frame>
</frame>
<frame posn="300 0 4.9" id="manialib-tooltip">
	<quad sizen="75 11" id="manialib-tooltip-box" style="Bgs1InRace" substyle="BgTitle3_3"/>
	<label id="manialib-tooltip-text" posn="4 -5.5 0.1" sizen="67 7" valign="center2" style="TextTips"/>
</frame>
</frame>